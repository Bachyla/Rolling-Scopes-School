{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/Character/Character.js","webpack:///./src/js/Character/Enemy.js","webpack:///./src/js/Character/HealthBar.js","webpack:///./src/js/Constants/CompoundWordList.js","webpack:///./src/js/Constants/Vocabulary.js","webpack:///./src/js/Constants/animals.js","webpack:///./src/js/Constants/carsLogoClassNames.js","webpack:///./src/js/Constants/characterClassList.js","webpack:///./src/js/Constants/countries.js","webpack:///./src/js/Constants/excessTaskClasses.js","webpack:///./src/js/Constants/namesCollection.js","webpack:///./src/js/Constants/sentencesTask.js","webpack:///./src/js/Controllers/BattleFieldController.js","webpack:///./src/js/Controllers/GameConfig.js","webpack:///./src/js/Controllers/GameController.js","webpack:///./src/js/Scenes/Score.js","webpack:///./src/js/Scenes/StartPage.js","webpack:///./src/js/Tasks/AnimalsNamesTask.js","webpack:///./src/js/Tasks/CapitalsTask.js","webpack:///./src/js/Tasks/CarsLogoTask.js","webpack:///./src/js/Tasks/ComparisionAnimalsTask.js","webpack:///./src/js/Tasks/ComparisionMathTask.js","webpack:///./src/js/Tasks/CompoundWordsTask.js","webpack:///./src/js/Tasks/CountriesTask.js","webpack:///./src/js/Tasks/ExcessItemTask.js","webpack:///./src/js/Tasks/ListeningTask.js","webpack:///./src/js/Tasks/MathTask.js","webpack:///./src/js/Tasks/SentencesGrammarTask.js","webpack:///./src/js/Tasks/SortableLettersTask.js","webpack:///./src/js/Tasks/SortableNumbersTask.js","webpack:///./src/js/Tasks/SquareTask.js","webpack:///./src/js/Tasks/Task.js","webpack:///./src/js/Tasks/TranslationTask.js","webpack:///./src/js/Tasks/bundleTasks.js","webpack:///./src/js/app.js","webpack:///./src/style/bundle.css"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D,0DAA0D,aAAa;AACvE,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,0E;;;;;;;;;;;;;;AC9FA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,yCAAyC,GAAG,+BAA+B,GAAG,+BAA+B;AACpI;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sE;;;;;;;;;;;;ACtBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0E;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;;ACzHA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;AC5FA;AACA;AACA,C;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,WAAW;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,4CAA4C;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,SAAS;AACT;AACA;;AAEA,sF;;;;;;;;;;;;ACzEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wD;AACA;;AAEA;AACA;AACA;AACA,8B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,2E;;;;;;;;;;;;ACtHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+E;;;;;;;;;;;;AC5IA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sE;;;;;;;;;;;;AC3CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gF;;;;;;;;;;;;;;;;ACpDA;AACkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,4C;;;;;;;;;;;;;;;;ACpCA;AACoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,oC;;;;;;;;;;;;;;;;AC7BA;AACsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,oC;;;;;;;;;;;;;;;;ACjDA;AACkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mD;;;;;;;;;;;;;;;AC7CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACnCoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,8C;;;;;;;;;;;;;;;;AC7EA;AACoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,sC;;;;;;;;;;;;;;;;ACnCA;AACsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wC;;;;;;;;;;;;;;;ACjDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,sC;;;;;;;;;;;;;;;AClCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;;;;AC3DA;AACoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,iBAAiB;AAC9E;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+C;;;;;;;;;;;;;;;AC1EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kD;;;;;;;;;;;;;;;ACxEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gD;;;;;;;;;;;;;;;ACjFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,YAAY,SAAS,WAAW;AACvF;AACA;AACA;AACA,uDAAuD,YAAY,SAAS,WAAW;AACvF;AACA;AACA;AACA,uDAAuD,WAAW,SAAS,YAAY;AACvF;AACA,sB;AACA;AACA,uDAAuD,YAAY,SAAS,WAAW,SAAS,YAAY;AAC5G;AACA,sB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,gC;;;;;;;;;;;;;;ACvEqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,qE;;;;;;;;;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,yC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BoB;AACI;AACL;AACO;AACJ;AACF;AACH;AACE;AACU;AACR;AACF;AACM;AACH;AACE;;;;;;;;;;;;;;;;;;;;;;;;;;ACbxB;AACA;AACA;AACA;AACA;AACA;AACqB;AACrB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,yD;;;;;;;;;;;AC1BA,uC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/app.js\");\n","import HealthBar from \"./HealthBar\";\n\nclass Character {\n    constructor() {\n        this.faceId = 0;\n        this.styleId = 0;\n        this.gunId = 0;\n        this.health = 100;\n        this.gunShotSound = document.getElementById('gun-shot-sound');\n        this.throwSound = document.getElementById('throw-sound');\n    }\n\n    createFigure () {\n        let figure = document.createElement('div');\n        this.head = document.createElement('div');\n        this.face = document.createElement('div');\n        this.hair = document.createElement('div');\n        this.body = document.createElement('div');\n        this.head.classList.add('head');\n        this.face.classList.add('face', `face-${this.faceId}`);\n        this.hair.classList.add('hairstyle', `hairstyle-${this.styleId}`);\n        this.body.classList.add('body-with-gun', `body-${this.gunId}`);\n        this.head.appendChild(this.face);\n        this.head.appendChild(this.hair);\n        figure.appendChild(this.head);\n        figure.appendChild(this.body);\n        return figure;\n    }\n\n    createHealthBar(className) {\n        if (!this.healthBar) {\n            this.healthBar = new HealthBar(className);\n        } else {\n            this.renderHealthBar();\n        }\n    }\n\n    renderHealthBar() {\n        this.healthBar.render(this.health);\n    }\n\n    attack(attackType) {\n        if (attackType === 'shot') {\n            this.body.className = 'body-shooter';\n            this.head.className = 'head';\n            this.body.classList.add(`body-${this.gunId}`);\n            setTimeout(() => {\n                this.gunShotSound.play();\n                this.body.classList.add('body-attack-shot-anim');\n                this.head.classList.add('head-attack-shot-anim');\n            }, 3000)\n        } else if (attackType === 'throw') {\n            this.body.className = 'body-free-hands';\n            this.head.className = 'head';\n            this.ball.className = 'throwableObj';\n            setTimeout(() => {\n                this.throwSound.play();\n                this.body.classList.add('body-attack-throw-anim');\n                this.head.classList.add('head-attack-throw-anim');\n                this.ball.classList.add('potato-correct-throw-anim');\n            }, 3000)\n        }\n    }\n\n    takeAttack(attackType) {\n        this.health = this.health - 25;\n        if (attackType === 'shot') {\n            this.body.className = 'body-free-hands';\n            this.head.className = 'head';\n            setTimeout(() => {\n                if (this.health) {\n                    this.body.classList.add('body-opponent-shot-anim');\n                    this.head.classList.add('head-opponent-shot-anim');\n                } else {\n                    this.body.classList.add('body-opponent-final-shot');\n                    this.head.classList.add('head-opponent-final-shot');\n                }\n            }, 3000);\n        } else if (attackType === 'throw') {\n            this.body.className = 'body-free-hands';\n            this.head.className = 'head';\n            setTimeout(() => {\n                if (this.health) {\n                    this.body.classList.add('body-opponent-throw-anim');\n                    this.head.classList.add('head-opponent-throw-anim');\n                } else {\n                    this.body.classList.add('body-opponent-final-throw');\n                    this.head.classList.add('head-opponent-final-throw');\n                }\n            }, 3000);\n        }\n    }\n}\n\nexport default Character;","import Character from \"./Character\";\n\nclass Enemy extends Character {\n    constructor(names) {\n        super();\n        this.namesList = names;\n    }\n\n    generateName() {\n        let adjectiveIndex = Math.floor(Math.random() * this.namesList.adjective.length);\n        let nounIndex = Math.floor(Math.random() * this.namesList.noun.length);\n        let nameIndex = Math.floor(Math.random() * this.namesList.name.length);\n        this.name = `${this.namesList.adjective[adjectiveIndex]} ${this.namesList.noun[nounIndex]} ${this.namesList.name[nameIndex]}`;\n    }\n\n    generateLook() {\n        this.faceId = Math.floor(Math.random() * 8);\n        this.styleId = Math.floor(Math.random() * 8);\n        this.gunId = Math.floor(Math.random() * 4);\n    }\n}\n\nexport default Enemy;","class HealthBar {\n    constructor(className) {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.classList.add('bar', className);\n        this.container = document.getElementById('health-bar');\n        this.container.appendChild(this.canvas);\n    }\n\n    render(health = 100) {\n        this.canvas.width = this.canvas.width\n        this.ctx.fillStyle = \"lightgrey\";\n        this.ctx.fillRect(0, 0, this.canvas.width * health / 100, this.canvas.height);\n    }\n}\n\nexport default HealthBar; ","export const WORD_LIST = [\n    {\n        start: 'foot',\n        end: 'ball',\n        full: 'football'\n    },\n    {\n        start: 'sea',\n        end: 'shell',\n        full: 'seashell'\n    },\n    {\n        start: 'wood',\n        end: 'pecker',\n        full: 'woodpecker'\n    },\n    {\n        start: 'butter',\n        end: 'fly',\n        full: 'butterfly'\n    },\n    {\n        start: 'table',\n        end: 'ware',\n        full: 'tableware'\n    },\n    {\n        start: 'fire',\n        end: 'works',\n        full: 'fireworks'\n    },\n    {\n        start: 'sub',\n        end: 'way',\n        full: 'subway'\n    },\n    {\n        start: 'back',\n        end: 'bone',\n        full: 'backbone'\n    },\n    {\n        start: 'jack',\n        end: 'pot',\n        full: 'jackpot'\n    },\n    {\n        start: 'pass',\n        end: 'port',\n        full: 'passport'\n    },\n    {\n        start: 'for',\n        end: 'get',\n        full: 'forget'\n    },\n    {\n        start: 'key',\n        end: 'board',\n        full: 'keyboard'\n    },\n    {\n        start: 'touch',\n        end: 'down',\n        full: 'touchdown'\n    },\n    {\n        start: 'pick',\n        end: 'up',\n        full: 'pickup'\n    },\n    {\n        start: 'book',\n        end: 'case',\n        full: 'bookcase'\n    },\n    {\n        start: 'week',\n        end: 'end',\n        full: 'weekend'\n    },\n    {\n        start: 'fore',\n        end: 'hand',\n        full: 'forehand'\n    },\n    {\n        start: 'under',\n        end: 'dog',\n        full: 'underdog'\n    },\n    {\n        start: 'air',\n        end: 'field',\n        full: 'airfield'\n    },\n    {\n        start: 'brain',\n        end: 'child',\n        full: 'brainchild'\n    },\n    {\n        start: 'rain',\n        end: 'bow',\n        full: 'rainbow'\n    },\n    {\n        start: 'car',\n        end: 'go',\n        full: 'cargo'\n    },\n    {\n        start: 'bed',\n        end: 'rock',\n        full: 'bedrock'\n    },\n    {\n        start: 'sand',\n        end: 'lot',\n        full: 'sandlot'\n    }\n] ","export const VOCABULARY = [\n    {\n        word: 'street',\n        translation: ['улица', 'деловой', 'улочка']\n    },\n    {\n        word: 'company',\n        translation: ['компания', 'фирма', 'общество', 'товарищество']\n    },\n    {\n        word: 'number',\n        translation: ['номер', 'количество', 'число', 'цифра', 'сумма']\n    },\n    {\n        word: 'world',\n        translation: ['мир', 'свет', 'вселенная', 'общество', 'царство', 'кругозор']\n    },\n    {\n        word: 'house',\n        translation: ['дом', 'жилище', 'театр', 'здание', 'палата', 'гостиница']\n    },\n    {\n        word: 'woman',\n        translation: ['женщина', 'баба', 'служанка', 'любовница', 'уборщица']\n    },\n    {\n        word: 'people',\n        translation: ['люди', 'народ', 'жители', 'население', 'нация', 'служащие']\n    },\n    {\n        word: 'place',\n        translation: ['место', 'местечко', 'город', 'положение', 'площадь', 'жилище']\n    },\n    {\n        word: 'school',\n        translation: ['школа', 'обучение', 'направление', 'занятия в школе', 'класс']\n    },\n    {\n        word: 'country',\n        translation: ['страна', 'местность', 'родина', 'деревня', 'отечество', 'территория']\n    },\n    {\n        word: 'point',\n        translation: ['точка', 'балл', 'пункт', 'момент', 'очко', 'дело']\n    },\n    {\n        word: 'family',\n        translation: ['семья', 'семейство', 'род', 'содружество']\n    },\n    {\n        word: 'power',\n        translation: ['власть', 'мощность', 'сила', 'мощь', 'энергия', 'способность']\n    },\n    {\n        word: 'money',\n        translation: ['деньги', 'денежные суммы', 'богатство', 'монетные валюты']\n    },\n    {\n        word: 'market',\n        translation: ['рынок', 'базар', 'торговля', 'спрос', 'сбыт', 'магазин']\n    },\n    {\n        word: 'report',\n        translation: ['доклад', 'отчет', 'сообщение', 'рапорт', 'репортаж', 'донесение']\n    },\n    {\n        word: 'friend',\n        translation: ['друг', 'подруга', 'приятель', 'знакомый', 'товарищ', 'приятельница']\n    },\n    {\n        word: 'parent',\n        translation: ['родитель', 'предок', 'родительница', 'причина', 'праотец', 'приемный отец']\n    },\n    {\n        word: 'person',\n        translation: ['человек', 'лицо', 'личность', 'особа', 'персонаж', 'субъект']\n    },\n    {\n        word: 'reason',\n        translation: ['причина', 'повод', 'основание', 'разум', 'рассудок', 'довод']\n    },\n    {\n        word: 'morning',\n        translation: ['утро', 'утренняя заря', 'начало', 'ранний период']\n    },\n    {\n        word: 'figure',\n        translation: ['рисунок', 'цифра', 'фигура', 'диаграмма', 'образ', 'личность']\n    },\n    {\n        word: 'price',\n        translation: ['цена', 'расценка', 'ценность', 'жертва']\n    },\n    {\n        word: 'support',\n        translation: ['поддержка', 'помощь', 'опора', 'подставка', 'суппорт', 'кронштейн']\n    },\n    {\n        word: 'health',\n        translation: ['здоровье', 'самочувствие', 'здравие', 'жизнеспособность', 'благосостояние']\n    },\n    {\n        word: 'field',\n        translation: ['поле', 'область', 'месторождение', 'пространство', 'поприще']\n    },\n    {\n        word: 'example',\n        translation: ['пример', 'образец', 'экземпляр', 'урок']\n    },\n    {\n        word: 'action',\n        translation: ['действие', 'акция', 'деятельность', 'воздействие', 'поступок', 'результат', 'эффект', 'поведение', 'влияние']\n    },\n    {\n        word: 'paper',\n        translation: ['бумага', 'документ', 'обои']\n    },\n    {\n        word: 'table',\n        translation: ['стол', 'таблица', 'расписание', 'доска', 'трапеза', 'плита']\n    },\n    {\n        word: 'animal',\n        translation: ['животное', 'зверь', 'скотина']\n    },\n    {\n        word: 'picture',\n        translation: ['рисунок', 'картина', 'изображение', 'картинка', 'представление', 'образ']\n    },\n    {\n        word: 'child',\n        translation: ['ребенок', 'дитя', 'сын', 'малыш', 'младенец', 'потомок']\n    },\n    {\n        word: 'horse',\n        translation: ['лошадь', 'конь', 'конница', 'кавалерия', 'козлы', 'рама', 'лошадка']\n    },\n    {\n        word: 'color',\n        translation: ['цвет', 'краска', 'колорит', 'оттенок', 'свет', 'тон']\n    },\n    {\n        word: 'summer',\n        translation: ['лето', 'год', 'балка']\n    },\n    {\n        word: 'letter',\n        translation: ['письмо', 'буква', 'символ', 'послание', 'литера', 'шрифт']\n    },\n    {\n        word: 'river',\n        translation: ['река', 'поток', 'речка']\n    },\n    {\n        word: 'potato',\n        translation: ['картофель', 'картошка', 'картофелина', 'дырка']\n    },\n    {\n        word: 'mouse',\n        translation: ['мышь', 'мышка', 'мышонок']\n    },\n    {\n        word: 'sugar',\n        translation: ['сахар', 'сахарок']\n    },\n    {\n        word: 'window',\n        translation: ['окно', 'окошко', 'витрина']\n    }\n]","export const ANIMALS = [\n    {\n        className: 'malamute',\n        name: [\n            'dog', 'malamute', 'собака'\n        ],\n        topSpeed: 50\n    },\n    {\n        className: 'bear',\n        name: [\n            'bear', 'медведь'\n        ],\n        topSpeed: 56\n    },\n    {\n        className: 'tiger',\n        name: [\n            'tiger', 'тигр'\n        ],\n        topSpeed: 96\n    },\n    {\n        className: 'camel',\n        name: [\n            'camel', 'верблюд'\n        ],\n        topSpeed: 64\n    },\n    {\n        className: 'fox',\n        name: [\n            'fox', 'лиса'\n        ],\n        topSpeed: 48\n    },\n    {\n        className: 'horse',\n        name: [\n            'horse', 'лошадь'\n        ],\n        topSpeed: 66\n    },\n    {\n        className: 'lion',\n        name: [\n            'lion', 'лев'\n        ],\n        topSpeed: 58\n    },\n    {\n        className: 'chicken',\n        name: [\n            'chicken', 'цыпленок', 'цыплята', 'курица'\n        ],\n        topSpeed: 5\n    },\n    {\n        className: 'corgi',\n        name: [\n            'dog', 'corgi', 'собака'\n        ],\n        topSpeed: 8\n    },\n    {\n        className: 'cow',\n        name: [\n            'cow', 'корова'\n        ],\n        topSpeed: 40\n    },\n    {\n        className: 'crab',\n        name: [\n            'crab', 'краб'\n        ],\n        topSpeed: 18\n    },\n    {\n        className: 'pig',\n        name: [\n            'pig', 'minipig', 'поросенок', 'свинья'\n        ],\n        topSpeed: 17\n    },\n    {\n        className: 'york',\n        name: [\n            'dog', 'york', 'собака'\n        ],\n        topSpeed: 9\n    },\n]","export const CLASS_NAMES = [\n    'audi', 'bentley', 'honda', 'hyundai', 'jaguar', 'lexus', 'mercedes', 'suzuki', 'tesla', 'toyota', 'volkswagen'\n]","export const CLASS_LIST = {\n    faces: [\n        'face-0', 'face-1', 'face-2', 'face-3', \n        'face-4', 'face-5', 'face-6', 'face-7'\n    ],\n    hairstyles: [\n        'hairstyle-0', 'hairstyle-1', 'hairstyle-2', 'hairstyle-3', \n        'hairstyle-4', 'hairstyle-5', 'hairstyle-6', 'hairstyle-7'\n    ],\n    guns: [\n        'gun-0', 'gun-1', 'gun-2', 'gun-3'\n    ]\n}","export const COUNTRIES = [\n    {\n        country: ['belarus', 'беларусь'],\n        capital: ['minsk', 'минск'],\n        className: 'belarus-flag'\n    },\n    {\n        country: ['russia', 'россия'],\n        capital: ['Moscow', 'москва'],\n        className: 'russia-flag'\n    },\n    {\n        country: ['usa', 'сша', 'united states'],\n        capital: ['washington', 'вашингтон'],\n        className: 'usa-flag'\n    },\n    {\n        country: ['finland', 'финляндия'],\n        capital: ['helsinki', 'хельсинки'],\n        className: 'finland-flag'\n    },\n    {\n        country: ['italy', 'италия'],\n        capital: ['rome', 'рим'],\n        className: 'italy-flag'\n    },\n    {\n        country: ['norway', 'норвегия'],\n        capital: ['oslo', 'осло'],\n        className: 'norway-flag'\n    },\n    {\n        country: ['france', 'франция'],\n        capital: ['paris', 'париж'],\n        className: 'france-flag'\n    },\n    {\n        country: ['ukraine', 'украина'],\n        capital: ['kiev', 'киев'],\n        className: 'ukraine-flag'\n    },\n    {\n        country: ['poland', 'польша'],\n        capital: ['warsaw', 'варшава'],\n        className: 'poland-flag'\n    },\n    {\n        country: ['germany', 'германия'],\n        capital: ['berlin', 'берлин'],\n        className: 'germany-flag'\n    },\n    {\n        country: ['sweden', 'швеция'],\n        capital: ['stockholm', 'стокгольм'],\n        className: 'sweden-flag'\n    },\n    {\n        country: ['japan', 'япония'],\n        capital: ['tokio', 'токио'],\n        className: 'japan-flag'\n    }\n]\n\n","export const CLASS_NAMES = [\n    [\n        'apple', 'apricot', 'banana', 'kiwi', 'lemon', 'orange', 'peach', 'pear'\n    ],\n    [\n        'tomato', 'cabbage', 'corn', 'cucumber', 'eggplant', 'onion', 'pepper', 'pumpkin'\n    ]\n]\n\n\n","const NAMES_COLLECTION = {\n    adjective: [\n        'Misty', 'Royal', 'Brave', 'Fast', 'Vengeful', 'Spitfire', 'Nuclear', 'Crazy', 'Nuts', 'Screwy'\n    ],\n    noun: [\n        'Doctor', 'Clown', 'Peasant', 'Griffin', 'Ghost', 'Maniac', 'Killer', 'Gangster', 'Hooligan', 'Vandal'\n    ],\n    name: [\n        'Johnny', 'David', 'Carlos', 'Pedro', 'Eddie', 'Billy', 'Henry', 'Alexis', 'Isaac', 'Bruce'\n    ]\n};\n\nexport default NAMES_COLLECTION;\n\n","export const SENTENCES = [\n    'I brush my teeth every day',\n    'I always close the window at night',\n    'The sun rises in the east',\n    'I went to Belarus two years ago',\n    'Will you be my friend?',\n    'I will tell you the whole story',\n    'They are moving to the other city',\n    'My mother was cooking at the morning',\n    'We have known each other since school years',\n    'By the end of the year she had learned to cook',\n    'I will have translated the article by noon',\n    'We have lived here since 1975',\n    'He often came here',\n    'I was cooking when the phone rang'\n]","class BattleFieldController {\n    constructor(score) {\n        this.score = score;\n        this.battlePage = document.getElementById('battle-field');\n        this.playerNameField = document.getElementById('player-name');\n        this.opponentNameField = document.getElementById('opponent-name');\n        this.levelField = document.getElementById('game-level');\n        this.gameResultPage = document.getElementById('game-result-page'); \n        this.winGameWindow = document.getElementById('win-game-window');\n        this.loseGameWindow = document.getElementById('lose-game-window');\n        this.scoreContainer = document.getElementById('score-container');\n        this.solvedTasksElement = document.getElementById('final-score-task');\n        this.amountOfVictories = document.getElementById('number-of-victories');\n    }\n\n    init(locationId) {\n        this.battlePage.className = 'battle-field';\n        this.battlePage.classList.add(`${locationId}-location`);\n    }\n\n    render(player, opponent) {\n        if (this.opponentFigure) {\n            this.battlePage.removeChild(this.playerFigure);\n            this.battlePage.removeChild(this.opponentFigure);\n        };\n        this.createPlayer(player);\n        this.createEnemy(opponent);\n    }\n\n    createPlayer(player) {\n        this.player = player;\n        this.playerFigure = this.player.createFigure();\n        this.playerFigure.classList.add('player-container');\n        this.player.ball = document.createElement('div');\n        this.player.ball.classList.add('throwableObj');\n        this.playerNameField.textContent = this.player.name;\n        this.playerFigure.appendChild(this.player.ball);\n        this.battlePage.appendChild(this.playerFigure);\n        this.player.renderHealthBar();\n    }\n\n    createEnemy(opponent) {\n        this.opponent = opponent;\n        this.opponent.health = 100;\n        this.opponentFigure = this.opponent.createFigure();\n        this.opponentFigure.classList.add('opponent-container');\n        this.opponent.ball = document.createElement('div');\n        this.opponent.ball.classList.add('throwableObj');\n        this.opponentNameField.textContent = this.opponent.name;\n        this.levelField.textContent = this.opponent.level;\n        this.opponentFigure.appendChild(this.opponent.ball);\n        this.battlePage.appendChild(this.opponentFigure);\n        this.opponent.renderHealthBar();\n    }\n\n    showScoreWindow(level, solvedTasks) {\n        this.solvedTasksElement.textContent = solvedTasks;\n        this.amountOfVictories.textContent = level - 1;\n        this.score.refreshScore({name: this.player.name, result: solvedTasks});\n        this.score.showScore(this.scoreContainer);\n    }\n\n    showFinalWindow(result, level, solvedTasks) {\n        setTimeout(() => {\n            if (level) {\n                this.showScoreWindow(level, solvedTasks);\n            };\n            this.gameResultPage.classList.remove('hidden');\n            this[`${result}GameWindow`].classList.remove('hidden');\n        }, 1000);\n    }\n}\n\nexport default BattleFieldController;","class GameConfig {\n    constructor(player, classes, gameController) {\n        this.player = player;\n        this.classList = classes;\n        this.GameController = gameController;\n        this.selectLocationPage = document.getElementById('location-select');\n        this.playerConfigPage = document.getElementById('config-page');\n        this.faceContainer = document.getElementById('face-container');\n        this.styleContainer = document.getElementById('style-container');\n        this.gunContainer = document.getElementById('gun-container');\n        this.playerFigure = document.getElementById('player-figure');\n        this.nameInput = document.getElementById('player-name-input');\n        document.addEventListener('click', (e) => this.changeConfig(e));\n    }\n\n    init() {\n        this.createPlayerConfigPage();\n    }\n\n    selectLocation(e) {\n        this.locationId = e.target.id;\n        this.showPlayerConfigPage();\n    }\n\n    showPlayerConfigPage() {\n        this.playerConfigPage.classList.remove('hidden');\n        this.selectLocationPage.classList.add('hidden');    \n    }\n\n    createPlayerConfigPage() {\n        this.createFaceItems();\n        this.createStyleItems();\n        this.createGunItems();    \n        this.renderPlayerFigure();\n    }\n\n    createFaceItems() {\n        const faceList = document.createElement('div');\n        faceList.classList.add('config-section');\n        this.classList.faces.forEach((item, index) => {\n            let face = document.createElement('div');\n            face.classList.add('config-item-image', item);\n            face.dataset.itemId = index;\n            face.dataset.itemType = 'face';\n            faceList.appendChild(face);\n        });\n        this.faceContainer.appendChild(faceList);\n    }\n\n    createStyleItems() {\n        const styleList = document.createElement('div');\n        styleList.classList.add('config-section');\n        this.classList.hairstyles.forEach((item, index) => {\n            let style = document.createElement('div');\n            style.classList.add('config-item-image', item);\n            style.dataset.itemId = index;\n            style.dataset.itemType = 'style';\n            styleList.appendChild(style);\n        });\n        this.styleContainer.appendChild(styleList);\n    }\n\n    createGunItems() {\n        const gunList = document.createElement('div');\n        gunList.classList.add('config-section');\n        this.classList.guns.forEach((item, index) => {\n            let gun = document.createElement('div');\n            gun.classList.add('config-item-image', item);\n            gun.dataset.itemId = index;\n            gun.dataset.itemType = 'gun';\n            gunList.appendChild(gun);\n        });\n        this.gunContainer.appendChild(gunList);\n    }\n\n    renderPlayerFigure() {\n        this.playerFigure.innerHTML = '';\n        let figure = this.player.createFigure();\n        figure.classList.add('player-figure-demo');\n        this.playerFigure.appendChild(figure);\n    }\n\n    changeConfig(e) {\n        let configType = e.target.dataset.itemType;\n        if (e.target.id === 'submit-button') {\n            this.compileConfig();\n        } else if (e.target.classList.contains('location-item')) {\n            this.selectLocation(e);\n        }\n        switch (configType) {\n            case 'face':  \n                this.player.faceId = e.target.dataset.itemId;\n                this.renderPlayerFigure()\n                break;\n            case 'style': \n                this.player.styleId = e.target.dataset.itemId;\n                this.renderPlayerFigure()\n                break;\n            case 'gun': \n                this.player.gunId = e.target.dataset.itemId;\n                this.renderPlayerFigure()\n                break;\n        }\n    }\n\n    compileConfig() {\n        if (this.nameInput.value) {\n            this.player.name = this.nameInput.value;\n            this.playerConfigPage.classList.add('hidden');            \n            this.GameController.init(this.player, this.locationId);\n            this.GameController.initGame();\n            this.nameInput.value = \"\";\n        } else {\n            this.nameInput.classList.add('empty-input')\n        }\n    }\n}\n\nexport default GameConfig; ","class GameController {\n    constructor(battleField, enemy, tasks) {\n        this.battlefield = battleField;\n        this.opponent = enemy;\n        this.tasksList = tasks;\n        this.task = null;\n        this.activeAttack = false;\n        this.startPage = document.getElementById('start-page');\n        this.attackConfigPage = document.getElementById('attack-config-page');\n        this.attackTypeWindow = document.getElementById('attack-type');\n        this.taskTypeWindow = document.getElementById('task-type');\n        this.attackButton = document.getElementById('attack-button');\n        this.taskSection = document.getElementById('task-field');\n        document.addEventListener('click', (e) => this.handleEvents(e));\n        document.addEventListener('keydown', (e) => this.keyboardControl(e));\n        \n    }\n\n    init(player, location) {\n        this.level = 1;\n        this.solvedTasks = 0;\n        this.player = player;\n        this.gameStatus = null;\n        this.player.createHealthBar('player-health-bar');\n        this.opponent.createHealthBar('opponent-health-bar');\n        this.battlefield.init(location);\n    }\n\n    initGame() {\n        this.createOpponent();\n        this.battlefield.render(this.player, this.opponent);\n    }\n\n    handleEvents(e) {\n        if (e.target.id === 'attack-button' && !this.activeAttack) {\n            this.startAttack(e);\n        } else if (e.target.id === 'next-game-button') {\n            this.startNextRound();\n        } else if (e.target.classList.contains('exit-button')) {\n            this.exitToMenu(e);\n        } else if (e.target.classList.contains('attack-type-item')) {\n            this.selectAttackType(e)\n        } else if (e.target.classList.contains('task-type-item')) {\n            this.selectTaskType(e)\n        } else if (e.target.id === 'check-result') {\n            this.checkAnswer();\n        }\n    }\n\n    keyboardControl(e) {\n        if (e.keyCode === 13 && !this.taskSection.classList.contains('hidden')) {\n            this.checkAnswer();\n        }\n    }\n\n    startAttack (e) {\n        this.attackConfigPage.classList.remove('hidden');\n        e.target.classList.contains('attack-button-animation') ? e.target.classList.remove('attack-button-animation') : null;\n    }\n\n    startNextRound () {\n        this.level++;\n        this.initGame();\n        this.battlefield.gameResultPage.classList.add('hidden');\n        this.battlefield.winGameWindow.classList.add('hidden');\n    }\n\n    exitToMenu (e) {\n        let resultWindow = `${this.gameStatus}GameWindow`;\n        this.battlefield.gameResultPage.classList.add('hidden');\n        this.battlefield[resultWindow].classList.add('hidden');\n        this.battlefield.battlePage.classList.add('hidden');\n        this.startPage.classList.remove('hidden');\n        this.player.health = 100;\n    }\n\n    createOpponent() {\n        this.opponent.level = this.level;\n        this.opponent.generateName();\n        this.opponent.generateLook();\n    }\n\n    selectAttackType(e) {\n        this.attackType = e.target.id;\n        this.attackTypeWindow.classList.add('hidden');\n        this.taskTypeWindow.classList.remove('hidden');\n    }\n\n    selectTaskType(e) {\n        this.attackConfigPage.classList.add('hidden');\n        this.attackTypeWindow.classList.remove('hidden');\n        this.taskTypeWindow.classList.add('hidden');\n        this.task = this.tasksList[e.target.id];\n        this.tasksList[e.target.id].init();\n    }\n\n    checkAnswer() {\n        let result = this.task.checkResult();\n        this.activeAttack = true;\n        if (result) {\n            this.solvedTasks++;\n            this.player.attack(this.attackType);\n            this.opponent.takeAttack(this.attackType);\n            setTimeout(() => {\n                this.task.correctAnswer();\n            }, 400);\n            setTimeout(() => {\n                this.opponent.healthBar.render(this.opponent.health);\n                this.activeAttack = false;\n                this.checkVictory();\n            }, 6000);\n        } else {\n            this.opponent.attack(this.attackType);\n            this.player.takeAttack(this.attackType);\n            setTimeout(() => {\n                this.task.wrongAnswer();\n            }, 400);\n            setTimeout(() => {\n                this.player.healthBar.render(this.player.health);\n                this.activeAttack = false;\n                this.checkLosing();\n            }, 6000);\n        }\n    }\n\n    checkVictory() {\n        if (!this.opponent.health) {\n            this.gameStatus = 'win';\n            this.battlefield.showFinalWindow(this.gameStatus);\n        }\n    }\n\n    checkLosing() {\n        if (!this.player.health) {\n            this.gameStatus = 'lose';\n            this.battlefield.showFinalWindow(this.gameStatus, this.level, this.solvedTasks);\n        }\n    }\n}\n\nexport default GameController;","class Score {\n    constructor() {\n    }\n\n    refreshScore(player) {\n        if (!localStorage['stickman-wars']) {\n            localStorage['stickman-wars'] = JSON.stringify([player]);\n        } else {\n            let score = JSON.parse(localStorage['stickman-wars']);\n            score.push(player);\n            score.sort((a,b) => b.result - a.result);\n            score.length > 10 ? score.pop() : score;\n            localStorage['stickman-wars'] = JSON.stringify(score);\n        }\n    }\n\n    showScore(wrapper) {\n        wrapper.innerHTML = '';\n        if (!localStorage['stickman-wars']) {\n            wrapper.textContent = \"Score list is empty...\"\n        } else {\n            const scoreList = document.createElement('ol');\n            const topScore = JSON.parse(localStorage['stickman-wars']);\n            topScore.forEach(item => this.createScoreItem (item, scoreList));\n            wrapper.appendChild(scoreList);\n        }\n    }\n\n    createScoreItem(item, list) {\n        const scoreItem = document.createElement('li');\n        const itemWrapper = document.createElement('div');\n        const name = document.createElement('div');\n        const score = document.createElement('div');\n        itemWrapper.classList.add('score-item');\n        name.textContent = item.name;\n        score.textContent = item.result;\n        itemWrapper.appendChild(name);\n        itemWrapper.appendChild(score);\n        scoreItem.appendChild(itemWrapper);\n        list.appendChild(scoreItem);\n    }\n}\n\nexport default Score;","class StartPage {\n    constructor() {\n        this.startPage = document.getElementById('start-page');\n        this.menu = document.getElementById('main-menu');\n        this.scoreSection = document.getElementById('main-score-section');\n        this.scoreContainer = document.getElementById('main-score-container');\n        this.aboutSection = document.getElementById('main-about-section');\n        this.startPage.addEventListener('click', (e) => this.handleEvents(e));\n    }\n\n    init(score) {\n        this.score = score;\n    }\n\n    handleEvents(e) {\n        let id = e.target.id;\n        switch (id) {\n            case 'new-game':  \n                this.startGame();\n                break;\n            case 'about': \n                this.showGameDescription();\n                break;\n            case 'score': \n                this.demonstrateScore();\n                break;\n        }\n\n        if (e.target.classList.contains('close-button')) {\n            this.menu.classList.remove('hidden');\n            e.target.parentNode.classList.add('hidden');\n        }\n    }\n\n    startGame() {\n        this.selectLocationPage = document.getElementById('location-select');\n        this.selectLocationPage.classList.remove('hidden');\n        this.startPage.classList.add('hidden');\n    }\n\n    showGameDescription() {\n        this.aboutSection.classList.remove('hidden');\n        this.menu.classList.add('hidden');\n    }\n\n    demonstrateScore() {\n        this.score.showScore(this.scoreContainer);\n        this.scoreSection.classList.remove('hidden');\n        this.menu.classList.add('hidden');\n    }\n}\n\nexport default new StartPage();","import Task from \"./Task\";\nimport { ANIMALS } from \"../Constants/animals\";\n\nclass AnimalsNamesTask extends Task {\n    constructor() {\n        super();\n        this.animalsArray = ANIMALS;\n        this.taskWrapper = document.getElementById('animals-task-field');\n        this.animalImageWrapper = document.getElementById('animal-image-wrapper');\n        this.answerInput = document.getElementById('animal-name-answer');\n    }\n\n    init() {\n        super.init();\n        this.answerInput.value = '';\n        this.animalImageWrapper.innerHTML = '';\n        this.shuffleArray(this.animalsArray);\n        let index = Math.floor(Math.random() * this.animalsArray.length);\n        this.animal = this.animalsArray[index];\n        this.showAnimalImage();\n    }\n\n    showAnimalImage() {\n        let image = document.createElement('div');\n        image.classList.add('animal-image', this.animal.className);\n        this.animalImageWrapper.appendChild(image);\n    }\n\n    checkResult() {\n        let answer = this.answerInput.value.toLowerCase();\n        if (this.animal.name.indexOf(answer) !== -1) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const AnimalsNames = new AnimalsNamesTask();","import Task from \"./Task\";\nimport { COUNTRIES } from \"../Constants/countries\";\n\nclass CapitalsTask extends Task {\n    constructor() {\n        super();\n        this.countriesList = COUNTRIES;\n        this.taskWrapper = document.getElementById('capitals-task-field');\n        this.countrySpan = document.getElementById('country-for-capital-task');\n        this.answerInput = document.getElementById('capitals-answer');\n    }\n\n    init() {\n        super.init();\n        this.countrySpan.textContent = '';\n        this.answerInput.value = '';\n        let index = Math.floor(Math.random() * this.countriesList.length);\n        this.country = this.countriesList[index];\n        this.countrySpan.textContent = this.country.country[0].toUpperCase();\n    }\n\n    checkResult() {\n        let answer = this.answerInput.value.toLowerCase();\n        if (this.country.capital.indexOf(answer) !== -1) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const Capitals = new CapitalsTask();","import Task from \"./Task\";\nimport { CLASS_NAMES } from \"../Constants/carsLogoClassNames\";\n\nclass CarsLogoTask extends Task {\n    constructor() {\n        super();\n        this.classNamesArray = CLASS_NAMES;\n        this.taskWrapper = document.getElementById('carsLogo-task-field');\n        this.itemsWrapper = document.getElementById('cars-logo-wrapper');\n        this.carNameSpan = document.getElementById('car-logo-name');\n        this.itemsWrapper.addEventListener('click', (e) => this.selectImage(e));\n    }\n\n    init() {\n        super.init();\n        this.itemsWrapper.innerHTML = '';\n        this.selectedItem = null;\n        this.shuffleArray(this.classNamesArray);\n        this.car = this.classNamesArray[0];\n        this.carNameSpan.textContent = this.classNamesArray[0].toUpperCase();\n        this.otherLogos = this.classNamesArray.slice(1, 3);\n        this.allItems = this.otherLogos.concat(this.car);\n        this.shuffleArray(this.allItems);\n        this.createField();\n    }\n\n    createField() {\n        this.allItems.forEach((item) => {\n            let image = document.createElement('div');\n            image.classList.add(item);\n            this.itemsWrapper.appendChild(image);\n        })\n    }\n\n    selectImage(e) {\n        if (e.target.parentNode === this.itemsWrapper && e.target !== this.selectedItem) {\n            e.target.classList.add('selected-car-logo');\n            this.selectedItem ? this.selectedItem.classList.remove('selected-car-logo') : null;\n            this.selectedItem = e.target;\n        }\n    }\n\n    checkResult() {\n        if (this.selectedItem && this.selectedItem.classList.contains(this.car)) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const CarsLogo = new CarsLogoTask();","import Task from \"./Task\";\nimport { ANIMALS } from \"../Constants/animals\";\n\nclass ComparisionAnimalsTask extends Task {\n    constructor() {\n        super();\n        this.animalsArray = ANIMALS;\n        this.taskWrapper = document.getElementById('faster-animal-task-field');\n        this.itemsWrapper = document.getElementById('faster-animals-task-wrapper');\n        this.itemsWrapper.addEventListener('click', (e) => this.selectImage(e));\n    }\n\n    init() {\n        super.init();\n        this.itemsWrapper.innerHTML = '';\n        this.selectedItem = null;\n        this.shuffleArray(this.animalsArray);\n        this.animals = this.animalsArray.slice(0, 2);\n        this.createField();\n    }\n\n    createField() {\n        this.animals.forEach(item => {\n            let image = document.createElement('div');\n            image.classList.add(item.className);\n            this.itemsWrapper.appendChild(image);\n        })\n    }\n\n    selectImage(e) {\n        if (e.target.parentNode === this.itemsWrapper && e.target !== this.selectedItem) {\n            e.target.classList.add('selected-animal');\n            this.selectedItem ? this.selectedItem.classList.remove('selected-animal') : null;\n            this.selectedItem = e.target;\n        }\n    }\n\n    checkResult() {\n        this.animals.sort((a,b) => b.topSpeed - a.topSpeed);\n        if (this.selectedItem && this.selectedItem.classList.contains(this.animals[0].className)) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const FasterAnimals = new ComparisionAnimalsTask();","import Task from \"./Task\";\n\nclass ComparisionMathTask extends Task {\n    constructor() {\n        super();\n        this.taskWrapper = document.getElementById('comparision-task-field');\n        this.firstElement = document.getElementById('first-comparision-number');\n        this.answer = document.getElementById('comparision-operator');\n        this.secondElement = document.getElementById('second-comparision-number');\n    }\n\n    init() {\n        super.init();\n        this.answer.value = '';\n        this.generateNumbers();\n    }\n\n    generateNumbers() {\n        this.firstNumber = Math.floor(Math.random() * 100);\n        this.secondNumber = Math.floor(Math.random() * 100);\n        this.firstElement.textContent = this.firstNumber;\n        this.secondElement.textContent = this.secondNumber;\n    }\n\n    checkResult() {\n        let operator = this.answer.value;\n        switch (operator) {\n            case '>': return (this.firstNumber > this.secondNumber);\n            case '<': return (this.firstNumber < this.secondNumber);\n            case '=': return (this.firstNumber === this.secondNumber);\n        };\n        return false;\n    }\n}\n\nexport const ComparisionNumbers = new ComparisionMathTask();\n\n","import { WORD_LIST } from \"../Constants/CompoundWordList\"\nimport Task from \"./Task\";\n\nclass CompoundWordsTask extends Task {\n    constructor() {\n        super();\n        this.list = WORD_LIST;\n        this.taskWrapper = document.getElementById('compound-word-task-field');\n        this.startParts = document.getElementById('start-parts');\n        this.endParts = document.getElementById('end-parts');\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\n        this.startParts.addEventListener('drop', (e) => this.drop(e));\n        this.pairs = 4;\n    }\n\n    init() {\n        super.init();\n        this.startParts.innerHTML = '';\n        this.endParts.innerHTML = '';\n        this.compoundWords = 0;\n        this.shuffleArray(this.list);\n        this.createField();\n    }\n\n    createField() {\n        let words = this.list.slice(0, this.pairs);\n        let arrayOfEndParts = [];\n        words.forEach(item => {\n            let firstPart = document.createElement('div');\n            firstPart.classList.add('first-part');\n            firstPart.textContent = item.start;\n            firstPart.dataset.fullword = item.full;\n            this.startParts.appendChild(firstPart);\n            let secondPart = document.createElement('div');\n            secondPart.setAttribute('draggable', true);\n            secondPart.textContent = item.end;\n            secondPart.dataset.fullword = item.full;\n            secondPart.classList.add('second-part');\n            arrayOfEndParts.push(secondPart);\n        });\n        this.shuffleArray(arrayOfEndParts);\n        arrayOfEndParts.forEach(item => {\n            this.endParts.appendChild(item);\n        });\n    }\n\n    allowDrop(e) {\n        e.preventDefault();\n    }\n\n    dragStart(e) {\n        e.dataTransfer.setData(\"word\", e.target.dataset.fullword);\n        e.dataTransfer.setData(\"part\", e.target.textContent);\n        this.dragElement = e.target;\n    }\n\n    drop(e) {\n        if (e.target.classList.contains('first-part') && !e.target.classList.contains('wrongDrop') && !e.target.classList.contains('correctDrop')) {\n            e.target.textContent += e.dataTransfer.getData(\"part\");\n            this.dragElement.classList.add('invisible');\n            if (e.target.dataset.fullword === e.dataTransfer.getData(\"word\")) {\n                e.target.classList.add('correctDrop');\n                this.compoundWords++;\n            } else {\n                e.target.classList.add('wrongDrop');\n            }\n        }\n    }\n\n    checkResult() {\n        if (this.compoundWords === this.pairs) {\n           return true;\n        } else return false;\n    }\n}\n\nexport const CompoundWords = new CompoundWordsTask();","import Task from \"./Task\";\nimport { COUNTRIES } from \"../Constants/countries\";\n\nclass CountriesTask extends Task {\n    constructor() {\n        super();\n        this.countriesList = COUNTRIES;\n        this.taskWrapper = document.getElementById('countries-task-field');\n        this.flagWrapper = document.getElementById('flag-wrapper');\n        this.answerInput = document.getElementById('country-answer');\n    }\n\n    init() {\n        super.init();\n        this.answerInput.value = '';\n        this.flagWrapper.innerHTML = '';\n        let index = Math.floor(Math.random() * this.countriesList.length);\n        this.country = this.countriesList[index];\n        this.showFlag();\n    }\n\n    showFlag() {\n        let flag = document.createElement('div');\n        flag.classList.add('flag', this.country.className);\n        this.flagWrapper.appendChild(flag)\n    }\n\n    checkResult() {\n        let answer = this.answerInput.value.toLowerCase();\n        if (this.country.country.indexOf(answer) !== -1) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const Countries = new CountriesTask();","import Task from \"./Task\";\nimport { CLASS_NAMES } from \"../Constants/excessTaskClasses\";\n\nclass ExcessItemTask extends Task {\n    constructor() {\n        super();\n        this.classNamesArray = CLASS_NAMES;\n        this.taskWrapper = document.getElementById('excessItem-task-field');\n        this.itemsWrapper = document.getElementById('excessItem-wrapper');\n        this.itemsWrapper.addEventListener('click', (e) => this.selectImage(e));\n    }\n\n    init() {\n        super.init();\n        this.itemsWrapper.innerHTML = '';\n        this.selectedItem = null;\n        this.shuffleArray(this.classNamesArray);\n        this.shuffleArray(this.classNamesArray[0]);\n        this.shuffleArray(this.classNamesArray[1]);\n        this.excessItemClassName = this.classNamesArray[0][0];\n        this.similarItemsClassNames = this.classNamesArray[1].slice(0, 3);\n        this.allItems = this.similarItemsClassNames.concat(this.excessItemClassName);\n        this.shuffleArray(this.allItems);\n        this.createField();\n    }\n\n    createField() {\n        this.allItems.forEach((item) => {\n            let image = document.createElement('div');\n            image.classList.add(item);\n            this.itemsWrapper.appendChild(image);\n        })\n    }\n\n    selectImage(e) {\n        if (e.target.parentNode === this.itemsWrapper && e.target !== this.selectedItem) {\n            e.target.classList.add('selected-excess-item');\n            this.selectedItem ? this.selectedItem.classList.remove('selected-excess-item') : null;\n            this.selectedItem = e.target;\n        }\n    }\n\n    checkResult() {\n        if (this.selectedItem && this.selectedItem.classList.contains(this.excessItemClassName)) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const ExcessItem = new ExcessItemTask();","import Task from \"./Task\";\n\nclass ListeningTask extends Task {\n    constructor() {\n        super();\n        this.synth = window.speechSynthesis;\n        this.taskWrapper = document.getElementById('listenning-task-field');\n        this.playButton = document.getElementById('listen-button');\n        this.answerInput = document.getElementById('listenning-answer');\n        this.playButton.addEventListener('click', () => this.speakWord());\n    }\n\n    init() {\n        super.init();\n        this.answerInput.value = '';\n        let index = Math.floor(Math.random() * this.vocabulary.length);\n        this.word = this.vocabulary[index].word;\n    }\n\n    speakWord() {\n        this.speech = new SpeechSynthesisUtterance(this.word);\n        this.voices = this.synth.getVoices();\n        this.speech.voice = this.voices[4];\n        this.synth.speak(this.speech);\n    }\n\n    checkResult() {\n        let answer = this.answerInput.value.toLowerCase();\n        if (answer === this.word) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const Listening = new ListeningTask();","import Task from \"./Task\";\n\nclass MathExerciseTask extends Task {\n    constructor() {\n        super();\n        this.result = document.getElementById('result');\n        this.operations = ['+', '-', '*', '/'];\n        this.taskWrapper = document.getElementById(\"math-task-field\");\n        this.firstElement = document.getElementById('first-number');\n        this.operator = document.getElementById('operation');\n        this.secondElement = document.getElementById('second-number');\n    }\n\n    init() {\n        super.init();\n        this.result.value = '';\n        this.generateOperation();\n    }\n\n    generateOperation() {\n        let index = Math.floor(Math.random() * this.operations.length);\n        this.generateNumbers(this.operations[index]);\n    }\n\n    generateNumbers(operation) {\n        switch (operation) {\n            case '+':  \n                this.firstNumber = Math.floor(Math.random() * 100);\n                this.secondNumber = Math.floor(Math.random() * 100);\n                this.answer = this.firstNumber + this.secondNumber;\n                break;\n            case '-': \n                this.secondNumber = Math.floor(Math.random() * 100);\n                this.firstNumber = Math.floor(Math.random() * 100) + this.secondNumber;\n                this.answer = this.firstNumber - this.secondNumber;\n                break;\n            case '/': \n                this.secondNumber = Math.floor(Math.random() * 10) + 1;\n                this.firstNumber = this.secondNumber * (Math.floor(Math.random() * 10) + 1);\n                this.answer = this.firstNumber / this.secondNumber;\n                break;\n            case '*': \n                this.firstNumber = Math.floor(Math.random() * 100) + 1;\n                this.secondNumber = Math.floor(Math.random() * 10) + 1;\n                this.answer = this.firstNumber * this.secondNumber;\n                break;\n        }\n        this.firstElement.textContent = this.firstNumber;\n        this.operator.textContent = operation;\n        this.secondElement.textContent = this.secondNumber;\n    }\n\n    checkResult() {\n        if (+this.result.value === this.answer) {\n            return true;\n        } else return false\n    }\n}\n\nexport const MathTask = new MathExerciseTask();\n\n","import Task from \"./Task\";\nimport { SENTENCES } from \"../Constants/sentencesTask\"\n\nclass SentencesGrammarTask extends Task {\n    constructor() {\n        super();\n        this.sentensesArray = SENTENCES;\n        this.taskWrapper = document.getElementById('grammar-task-field');\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\n        this.taskWrapper.addEventListener('drop', (e) => this.drop(e));\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\n    }\n\n    init() {\n        super.init();\n        this.shuffleArray(this.sentensesArray);\n        this.sentence = this.sentensesArray[0].split(' ');\n        this.arrayOfCells = [];\n        this.dragElement = null;\n        this.shuffleArray(this.sentence);\n        this.createField();\n    }\n\n    createField() {\n        this.wordsContainer = document.createElement('div');\n        this.wordsContainer.classList.add('cells-container');\n        this.sentence.forEach(item => {\n            let cell = document.createElement('div');\n            cell.classList.add('reorder-cell');\n            cell.textContent = item;\n            this.wordsContainer.appendChild(cell);\n            cell.setAttribute('draggable', true);\n            this.arrayOfCells.push(cell);\n        });\n        this.taskWrapper.appendChild(this.wordsContainer);\n    }\n\n    allowDrop(e) {\n        e.preventDefault();\n    }\n\n    dragStart(e) {\n        this.dragElement = e.target;\n    }\n\n    drop(e) {\n        e.preventDefault();\n        if (e.target.classList.contains('reorder-cell') && this.dragElement.classList.contains('reorder-cell')) {\n            let word = e.target.textContent;\n            e.target.textContent = this.dragElement.textContent;\n            this.dragElement.textContent = word;\n        }\n    }\n\n    checkResult() {\n        let playerAnswer = '';\n        this.arrayOfCells.forEach(item => playerAnswer += `${item.textContent} `);\n        let correctAnswer = this.sentensesArray[0];\n        if (playerAnswer.trim() === correctAnswer) {\n            return true;\n        } else return false;\n    }\n\n    correctAnswer() {\n        super.correctAnswer();\n        this.wordsContainer.innerHTML = '';\n    }\n\n    wrongAnswer() {\n        super.wrongAnswer();\n        this.wordsContainer.innerHTML = '';\n    }\n}\n\nexport const GrammarTask = new SentencesGrammarTask();","import Task from \"./Task\";\n\nclass SortableLettersTask extends Task {\n    constructor() {\n        super();\n        this.taskWrapper = document.getElementById('reorder-task-field');\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\n        this.taskWrapper.addEventListener('drop', (e) => this.drop(e));\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\n    }\n\n    init() {\n        super.init();\n        this.arrayOfCells = [];\n        this.dragElement = null;\n        let index = Math.floor(Math.random() * this.vocabulary.length);\n        this.word = this.vocabulary[index].word;\n        this.createField();\n    }\n\n    createField() {\n        this.wordContainer = document.createElement('div');\n        this.wordContainer.classList.add('cells-container');\n        let arrayOfLetters = this.word.split('');\n        this.shuffleArray(arrayOfLetters);\n        arrayOfLetters.forEach(item => {\n            let cell = document.createElement('div');\n            cell.classList.add('reorder-cell');\n            cell.textContent = item;\n            this.wordContainer.appendChild(cell);\n            cell.setAttribute('draggable', true);\n            this.arrayOfCells.push(cell);\n        });\n        this.taskWrapper.appendChild(this.wordContainer);\n    }\n\n    allowDrop(e) {\n        e.preventDefault();\n    }\n\n    dragStart(e) {\n        this.dragElement = e.target;\n    }\n\n    drop(e) {\n        e.preventDefault();\n        if (e.target.classList.contains('reorder-cell') && this.dragElement.classList.contains('reorder-cell')) {\n            let letter = e.target.textContent;\n            e.target.textContent = this.dragElement.textContent;\n            this.dragElement.textContent = letter;\n        }\n    }\n\n    checkResult() {\n        let answer = '';\n        this.arrayOfCells.forEach(item => answer += item.textContent);\n        if (answer === this.word) {\n            return true;\n        } else return false;\n    }\n\n    correctAnswer() {\n        super.correctAnswer();\n        this.wordContainer.innerHTML = '';\n    }\n\n    wrongAnswer() {\n        super.wrongAnswer();\n        this.wordContainer.innerHTML = '';\n    }\n}\n\nexport const SortableLetters = new SortableLettersTask();","import Task from \"./Task\";\n\nclass ReorderNumbersTask extends Task {\n    constructor() {\n        super();\n        this.taskWrapper = document.getElementById('sort-numbers-task-field');\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\n        this.taskWrapper.addEventListener('drop', (e) => this.drop(e));\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\n    }\n\n    init() {\n        super.init();\n        this.arrayOfNumbers = [];\n        this.arrayOfCells = [];\n        this.dragElement = null;\n        this.fillArrayOfNumbers();\n        this.createField();\n    }\n\n    fillArrayOfNumbers() {\n        let i = 0;\n        for (i; i < 5; i++) {\n            let number = Math.floor(Math.random() * 100);\n            this.arrayOfNumbers.push(number);\n        }\n    }\n\n    createField() {\n        this.numbersContainer = document.createElement('div');\n        this.numbersContainer.classList.add('cells-container');\n        this.arrayOfNumbers.forEach(item => {\n            let cell = document.createElement('div');\n            cell.classList.add('reorder-cell');\n            cell.textContent = item;\n            this.numbersContainer.appendChild(cell);\n            cell.setAttribute('draggable', true);\n            this.arrayOfCells.push(cell);\n        });\n        this.taskWrapper.appendChild(this.numbersContainer);\n    }\n\n    allowDrop(e) {\n        e.preventDefault();\n    }\n\n    dragStart(e) {\n        this.dragElement = e.target;\n    }\n\n    drop(e) {\n        e.preventDefault();\n        if (e.target.classList.contains('reorder-cell') && this.dragElement.classList.contains('reorder-cell')) {\n            let number = e.target.textContent;\n            e.target.textContent = this.dragElement.textContent;\n            this.dragElement.textContent = number;\n        }\n    }\n\n    checkResult() {\n        let userAnswer = '';\n        let correctAnswer = '';\n        this.arrayOfCells.forEach(item => userAnswer += item.textContent);\n        this.arrayOfNumbers.sort((a,b) => a-b);\n        this.arrayOfNumbers.forEach(item => correctAnswer += item);\n        if (userAnswer === correctAnswer) {\n            return true;\n        } else return false;\n    }\n\n    correctAnswer() {\n        super.correctAnswer();\n        this.numbersContainer.innerHTML = '';\n    }\n\n    wrongAnswer() {\n        super.wrongAnswer();\n        this.numbersContainer.innerHTML = '';\n    }\n}\n\nexport const ReorderNumbers = new ReorderNumbersTask();","import Task from \"./Task\";\n\nclass SquareTask extends Task {\n    constructor() {\n        super();\n        this.taskWrapper = document.getElementById('squareFigure-task-field');\n        this.figureWrapper = document.getElementById('figure-wrapper');\n        this.answerInput = document.getElementById('square-answer');\n        this.figuresList = ['rectangle-triangle', 'rectangle', 'isosceles-triangle', 'trapezium'];\n    }\n\n    init() {\n        super.init();\n        this.answerInput.value = '';\n        this.figureWrapper.innerHTML = '';\n        this.shuffleArray(this.figuresList);\n        let index = Math.floor(Math.random() * this.figuresList.length);\n        this.figure = this.figuresList[index];\n        this.generateSize();\n        this.createDescription()\n        this.showFigure();\n    }\n\n    generateSize() {\n        this.height = Math.floor(Math.random() * 6) + 5;\n        this.width = Math.floor(Math.random() * 10) + 5;\n        this.delta = Math.floor(Math.random() * 6) + 5;\n        while ((this.height % 2) || (this.width % 2) || (this.delta % 2)) {\n            this.delta = Math.floor(Math.random() * 5) + 5;\n            this.height = Math.floor(Math.random() * 5) + 5;\n            this.width = Math.floor(Math.random() * 5) + 10;\n        }\n        this.bottom = this.width + this.delta; \n    }\n\n    createDescription() {\n        this.description = document.createElement('p');\n        switch (this.figure) {\n            case 'rectangle': \n                this.description.textContent = `AB = ${this.height}, BC = ${this.width}`;\n                this.square = this.height * this.width;\n                break;\n            case 'rectangle-triangle': \n                this.description.textContent = `BC = ${this.height}, AC = ${this.width}`;\n                this.square = this.height * this.width / 2;\n                break;\n            case 'isosceles-triangle': \n                this.description.textContent = `AC = ${this.width}, BM = ${this.height}`;\n                this.square = this.height * this.width / 2;\n                break;   \n            case 'trapezium': \n                this.description.textContent = `AB = ${this.bottom}, DC = ${this.width}, DF = ${this.height}`;\n                this.square = this.height * (this.bottom + this.width) / 2;\n                break;   \n        }\n    }\n\n    showFigure() {\n        this.image = document.createElement('div');\n        this.image.classList.add('figure', this.figure);\n        this.figureWrapper.appendChild(this.image);\n        this.figureWrapper.appendChild(this.description);\n    }\n\n    checkResult() {\n        if (this.square === +this.answerInput.value) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const Square = new SquareTask();","import { VOCABULARY } from \"../Constants/Vocabulary\";\n\nclass Task {\n    constructor() {\n        this.vocabulary = VOCABULARY;\n        this.taskSection = document.getElementById('task-field');\n        this.correctAnswerField = document.getElementById('correct-answer');\n        this.wrongAnswerField = document.getElementById('wrong-answer');\n        this.correctAnswerSound = document.getElementById('correct-answer-sound');\n        this.wrongAnswerSound = document.getElementById('wrong-answer-sound');\n    }\n\n    init() {\n        this.taskSection.classList.remove('hidden');\n        this.taskWrapper.classList.remove('hidden');\n    }\n    \n    shuffleArray(array) {\n        let i = array.length - 1\n        for (i; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    correctAnswer() {\n        this.taskSection.classList.add('hidden');\n        this.taskWrapper.classList.add('hidden');\n        this.correctAnswerField.classList.remove('hidden');\n        this.correctAnswerSound.play();\n        setTimeout(() => {\n            this.correctAnswerField.classList.add('hidden');\n        }, 1000);\n    }\n\n    wrongAnswer() {\n        this.taskSection.classList.add('hidden');\n        this.taskWrapper.classList.add('hidden');\n        this.wrongAnswerField.classList.remove('hidden');\n        this.wrongAnswerSound.play();\n        setTimeout(() => {\n            this.wrongAnswerField.classList.add('hidden');\n        }, 1000);\n    }\n}\n\nexport default Task;","import Task from \"./Task\";\n\nclass TranslationTask extends Task {\n    constructor() {\n        super();\n        this.taskWrapper = document.getElementById('translation-task-field');\n        this.wordContainer = document.getElementById('word-for-translation');\n        this.answerInput = document.getElementById('translation-input');\n    }\n\n    init() {\n        super.init();\n        this.answerInput.value = '';\n        let index = Math.floor(Math.random() * this.vocabulary.length);\n        this.word = this.vocabulary[index].word;\n        this.translations = this.vocabulary[index].translation;\n        this.wordContainer.textContent =  this.word.toUpperCase();\n    }\n\n    checkResult() {\n        this.answer = this.answerInput.value.toLowerCase();\n        if (this.translations.indexOf(this.answer) !== -1) {\n           return true;\n        } else return false;\n    }\n}\n\nexport const Translation = new TranslationTask()","export { Listening } from \"./ListeningTask\";\nexport { CompoundWords } from \"./CompoundWordsTask\";\nexport { MathTask } from \"./MathTask\";\nexport { SortableLetters } from \"./SortableLettersTask\";\nexport { Translation } from \"./TranslationTask\";\nexport { Countries } from \"./CountriesTask\";\nexport { Square } from \"./SquareTask\";\nexport { Capitals } from \"./CapitalsTask\";\nexport { ComparisionNumbers } from \"./ComparisionMathTask\";\nexport { ExcessItem } from \"./ExcessItemTask\";\nexport { CarsLogo } from \"./CarsLogoTask\";\nexport { ReorderNumbers } from \"./SortableNumbersTask\";\nexport { GrammarTask } from \"./SentencesGrammarTask\";\nexport { FasterAnimals } from \"./ComparisionAnimalsTask\";\nexport { AnimalsNames } from \"./AnimalsNamesTask\";","import StartPage from \"./Scenes/StartPage\";\nimport GameConfig from \"./Controllers/GameConfig\";\nimport Character from \"./Character/Character\";\nimport Enemy from \"./Character/Enemy\";\nimport BattleFieldController from \"./Controllers/BattleFieldController\";\nimport GameController from \"./Controllers/GameController\";\nimport { CLASS_LIST } from \"./Constants/characterClassList\";\nimport NAMES from \"./Constants/namesCollection\";\nimport Score from \"./Scenes/Score\";\nimport * as Tasks from \"./Tasks/bundleTasks\";\nimport style from '../style/bundle.css';\n\n\nconst score = new Score();\nconst player = new Character();\nconst opponent = new Enemy(NAMES);\nconst battleField = new BattleFieldController(score);\nconst gameController = new GameController(battleField, opponent, Tasks);\nconst gameConfig = new GameConfig(player, CLASS_LIST, gameController);\n\ngameConfig.init();\n\nconst initApp = function () {\n    StartPage.init(score);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", initApp());","// extracted by mini-css-extract-plugin"],"sourceRoot":""}